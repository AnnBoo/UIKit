G_giturl = "git@github.com:tonlabs/TON-Surf.git"
G_gitcred = 'TonJenSSH'
G_setup = "Not set"
G_install = "Not set"
G_webbuild = "Not set"
G_webdeploy = "Not set"
G_statusMergedPR = 'closed'
G_developmentBranch = 'development'
G_global_npm_path = "/var/jenkins_home/workspace/Front"
DiscordURL = "https://discordapp.com/api/webhooks/744877394648891442/xdc6_1iT-kd_DiGAwoIeCRfN6gA7n9uLDUMiaHUBdQcG9E2lM6Z9hMPCSmGt58q3lTs1"
C_TEXT = ""


pipeline {
    agent {
        dockerfile {
            dir 'deploy/dockerfiles'
            filename 'Dockerfile_Web'
            label 'master'
        }
    }
    parameters {
        string(name: 'BRANCH', defaultValue: 'development', description: 'Branch for the build')
        booleanParam(name: 'FORCE', defaultValue: false, description: 'mark as true if want to build a custom branch')
    }
    triggers {
        GenericTrigger(
         genericVariables: [
            [key: 'destination_branch', value: '$.pull_request.base.ref'],
            [key: 'PR_number', value: '$.number'],
            [key: 'action', value: '$.action']
         ],
         token: 'ybvclxv3ldjasb13ibv5',
         causeString: 'Merge to development branch',
         printContributedVariables: true,
         printPostContent: true,
         silentResponse: false,
        )
    }
    environment {
       PATH = "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$PATH"
       LC_ALL = "en_US.UTF-8"
       LANG = "en_US.UTF-8"
       userpass = credentials("TonJen-mac01pass")
       token = credentials("FIREBASE_UIKIT_TOKEN")
       NODE_OPTIONS = "--max-old-space-size=4096"
       GITHUB_ACCESS_TOKEN = credentials("JenkinsPackagesRW")
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
        disableConcurrentBuilds()
    }
    stages {
        stage('Check the merge to development') {
            when { anyOf { allOf {expression { "${action}" == G_statusMergedPR}; expression { "${destination_branch}" == G_developmentBranch}; environment name: 'FORCE', value: 'true' }}}
            stages {
                stage('Pre-setup') {
                    steps {
                        script {
                            def buildCause = currentBuild.getBuildCauses()
                            echo "buildCause: ${buildCause}";

                            C_TEXT = """
                                ${buildCause.shortDescription[0]}
                                Build number: ${BUILD_NUMBER}
                                Build parameters:
                                - Branch: **${params.BRANCH}**
                                - isForce: **${params.FORCE}**
                            """
                            echo C_TEXT;
                            currentBuild.description = C_TEXT;
                        }
                    }
                    post {
                        success {
                            script{G_setup = "success"}
                        }
                        failure {
                            script{G_setup = "failure"}
                        }
                    }
                }
                stage('npm Install') {
                    steps{
                        script {
                            sshagent (credentials: [G_gitcred]) {
                                sh """
                                    npm install
                                    npx lerna bootstrap && npx lerna run prepare
                                """
                            }
                        }
                    }
                    post {
                        success {
                            script{G_install = "success"}
                        }
                        failure {
                            script{G_install = "failure"}
                        }
                    }
                }
                stage('Webapp build'){
                    steps {
                        script {
                            sh """
                                cd Example
                                npm run web:bundle
                            """
                        }
                    }
                    post {
                        success {
                            script{G_webbuild = "success"}
                        }
                        failure {
                            script{G_webbuild = "failure"}
                        }
                    }
                }
                stage('Webapp deploy'){
                    steps {
                        script {
                            sh """
                                npm config set prefix $G_global_npm_path
                                alias firebase="`npm config get prefix`/bin/firebase"
                                cd Example
                                firebase deploy --token "$token"
                            """
                        }
                    }
                    post {
                        success {
                            script{G_webdeploy = "success"}
                        }
                        failure {
                            script{G_webdeploy = "failure"}
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                if (C_TEXT) {
                    string DiscordFooter = "Build duration is " + currentBuild.durationString
                    DiscordTitle = "UI Kit WEB"
                    DiscordDescription = "`${JOB_BASE_NAME}` build report:" + C_TEXT + "\n" \
                     + "NPM install: ${G_install}" + "\n" \
                     + "Build: ${G_webbuild}" + "\n" \
                     + "Deployment: ${G_webdeploy}" + "\n"
                    discordSend description: DiscordDescription, footer: DiscordFooter, link: RUN_DISPLAY_URL, successful: currentBuild.resultIsBetterOrEqualTo('SUCCESS'), title: DiscordTitle, webhookURL: DiscordURL
                }
            }
            script {
                cleanWs notFailBuild: true
            }
        }
    }
}
